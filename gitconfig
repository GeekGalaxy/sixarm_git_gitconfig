[user]
  email = sixarm@sixarm.com
  name = SixArm
[github]
  user = sixarm
  token = sixarm-token
[alias]

  # For help on git aliases and credit for these here, see these resources:
  # https://git.wiki.kernel.org/index.php/Aliases
  # http://stackoverflow.com/questions/267761/what-does-your-gitconfig-contain
  # http://superuser.com/questions/169695/what-are-your-favorite-git-aliases
  # http://stackoverflow.com/questions/1309430/how-to-embed-bash-script-directly-inside-a-git-alias

  # Simplest aliases
  a = add
  b = branch
  c = commit -m
  d = diff
  e = !git diff $1 | edit
  f = fetch
  g = grep
  l = log
  m = merge
  o = checkout
  p = pull
  r = remote
  s = status
  w = whatchanged

  # Simple fairly frequent aliases.
  # Some of these duplicate the aliases above,
  # which is intentional because this lets our
  # developers use whichever alias they prefer.
  au = add -u .
  br = branch
  brm = branch --merged
  brnm = branch --no-merged
  ca = commit --amend 
  ci = commit -v -m
  co = checkout
  cp = cherry-pick
  cp-nx = cherry-pick --no-commit -x
  di = diff
  lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
  lgtopo = log --graph --pretty=format:'%h : %s' --topo-order 
  lp = log -p
  lt = log --topo-order
  ls = ls-files
  me = merge --no-commit --no-ff
  rb = rebase
  rbc = rebase --continue
  rbs = rebase --skip
  rl = reflog
  rr = remote
  rrs = remote show
  rru = remote update
  rrp = remote prune
  rv = revert
  rvnc = revert --no-commit
  sb = show-branch
  sm = submodule
  smu = submodule update --init --recursive 
  st = status

  ### INSPECTION ALIASES ###

  # Show our defined aliases
  aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'

  # Show our tags
  tags = tag -n1 -l

  # Diffs
  diff-all = '!for name in $(git diff --name-only $1); do git difftool $1 $name & done'
  diff-changes = diff --name-status -r
  diff-stat = diff --stat -b -r
  diff-staged = diff --cached

  # From https://gist.github.com/492227
  head = !"git log -n1"
  heads = !"git log origin/master.. --format='%Cred%h%Creset;%C(yellow)%an%Creset;%H;%Cblue%f%Creset' | git name-rev --stdin --always --name-only | column -t -s';'"
  lost = !"git fsck | awk '/dangling commit/ {print $3}' | git show --format='SHA1: %C(yellow)%h%Creset %f' --stdin | awk '/SHA1/ {sub(\"SHA1: \", \"\"); print}'"

  ### LOG ALIASES ###

  log-graph = log --all --graph --decorate
  log-refs = log --all --graph --decorate --oneline --simplify-by-decoration --no-merges
  log-timeline = log --format='%h %an %ar - %s'
  log-local = log --oneline origin..HEAD
  log-fetched = log --oneline HEAD..origin/master

  # Show log of changes, most recent first
  log-changes = log --oneline --reverse

  # Show log of new commits after you fetched, with stats, excluding merges
  log-commits = log ORIG_HEAD.. --stat --no-merges

  # Show log with dates in our local timezone
  log-local = log --date=local

  # Show log as a graph
  log-graph = log --graph --oneline --decorate

  ### LOOKUP ALIASES ###

  # whois: given a string for an author, try to figure out full name and email:
  whois = "!sh -c 'git log -i -1 --pretty=\"format:%an <%ae>\n\" --author=\"$1\"' -"

  # Given any git object, try to show it briefly
  whatis = show -s --pretty='tformat:%h (%s, %ad)' --date=short

  # Show who contributed with summarized changes
  who = shortlog -s --

  # Show who contributed, in descending order by number of commits
  whorank = shortlog -sn --no-merges

  ### WORKFLOW ALIASES ###

  # Stash aliases
  save = !git stash save
  pop = !git stash pop

  # When you're a little worried that the world is coming to an end 
  panic = !tar cvf ../git_panic.tar *

  # Do everything we can to synchronize all changes
  get = !git pull && git submodule update --init --recurvsive
  put = !git commit -am "$1" && git push

  # Undo aliases
  undo = reset --hard
  uncommit = !git reset --soft HEAD^
  unstage = !git reset HEAD

  # Editing and adding conflicted files: when we get many merge conflicts
  # and want to quickly solve them using an editor, then add the  files.
  # Customize this by replacing "emacs" with your preferred editor.
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; emacs `f`"
  add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"

  # Work In Progress: from https://gist.github.com/492227 and VonC on stackoverflow.
  # tidy: allows for a quick way to add all new and modified files to the index,
  # while cleaning the index from the files removed from the working tree;
  # this cleaning will facilite a rebase, because there won't be any conlfict 
  # due to an "unclean" working directory (not in sync with the index).
  # The unwip will restore the deleted files to the working tree.
  wip = !"git add -A; git ls-files --deleted -z | xargs -0 git rm; git commit -m \"wip\""
  unwip = !"git log -n 1 | grep -q -c wip && git reset HEAD~1"

  ### SVN ALIASES ###

  # For SVN-compatible versions of commands, we use "foo-svn" instead
  # of "svn-foo" so that it's suggested when we tab-complete "git fo..."
  cherry-pick-svn = !GIT_EDITOR='sed -i /^git-svn-id:/d' git cherry-pick -e
  branch-svn = svn branch
  merge-svn = merge --squash
  push-svn = svn dcommit

  ### CVS ALIASES ###
  cvsi = !git cvsimport -k -a
  cvse = cvsexportcommit -u -p 
  cvseh = cvsexportcommit -u -p -c HEAD

  ### GITK ALIASES ###

  # show conflicting merge in gitk:
  gitk-conflict = !gitk --left-right HEAD...MERGE_HEAD

  # show full history in gitk (including "deleted" branches and stashes)
  gitk-history-all = !gitk --all $( git fsck | awk '/dangling commit/ {print $3}' )

  ### ADVANCED ALIASES ###

  # Search for a given string in all patches and print commit messages.
  # Posted by Mikko Rantalainen on StackOverflow.
  #
  # Example: search for any commit that adds or removes string "foobar"
  #     git searchcommits foobar
  # Example: search commits for string "foobar" in directory src/lib
  #     git searchcommits foobar src/lib
  # Example: search commits for "foobar", print full diff of commit with 1 line context
  #     git searchcommits foobar --pickaxe-all -U1 src/lib
  searchcommits = "!f() { query=\"$1\"; shift; git log -S\"$query\" \"$@\"; }; f \"$@\""

  # A 'debug' alias to help debugging builtins: when debugging builtins,
  # we use gdb to analyze the runtime state. However, we have to disable
  # the pager, and often we have to call the program with arguments.
  # If the program to debug is a builtin, we use this alias.
  debug = !GIT_PAGER= gdb --args git

  # Getting the diff of only one function: when we want to see just the 
  # differences of one function in one file in two different commits,
  # we create two temp files which contain only the function, then diff.
  # Use this alias this way: git funcdiff <old-rev> <new-rev> <path> <function>
  # diff-func = !sh -c "git show \"\$1:\$3\" | sed -n \"/^[^ \t].*\$4(/,/^}/p\" > .tmp1 && git show \"\$2:\$3\" | sed -n \"/^[^ \t].*\$4(/,/^}/p\" > .tmp2 && git diff --no-index .tmp1 .tmp2" -

  # Calling "interdiff" between commits: if upstream applied a
  # slightly modified patch, and we want to see the modifications, 
  # we use the program interdiff of the patchutils package. 
  intercommit = !sh -c 'git show "$1" > .git/commit1 && git show "$2" > .git/commit2 && interdiff .git/commit[12] | less -FRS' -

  # Prune all your stale remote branches: there's no way to tell 
  # git remote update to prune stale branches, and git remote prune
  # does not understand --all. So here is a shell command to do it.
  prune-all = !git remote | xargs -n 1 git remote prune

  # Publish is from Justin French
  publish = !git checkout master && git pull && git checkout dev && git rebase master && git checkout master && git merge dev && git wtf

  # Thanks to cody cutrer
  cherry-pick-merge = "!bash -c 'git cherry-pick -n -m 1 $0 && \
    git log -1 --pretty=%P $0 | cut -b 42- > .git/MERGE_HEAD && \
    git commit -v'"

  # Thanks to jtolds on stackoverflow
  remote-ref = "!bash -c ' \
    local_ref=$(git symbolic-ref HEAD); \
    local_name=${local_ref##refs/heads/}; \
    remote=$(git config branch.\"#local_name\".remote || echo origin); \
    remote_ref=$(git config branch.\"$local_name\".merge); \
    remote_name=${remote_ref##refs/heads/}; \
    echo remotes/$remote/$remote_name'"

  # Thanks to jtolds on stackoverflow  
  rebase-recent = !git rebase -i $(git remote-ref)

  # Use graphviz for display.
  # This produces output that can be displayed using dotty, for example:
  #   $ git graphviz HEAD~100..HEAD~60 | dotty /dev/stdin
  #   $ git graphviz --first-parent master | dotty /dev/stdin
  graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"

[apply]
    whitespace = nowarn

[branch]
  autosetupmerge = true

[branch "master"]
  merge = refs/heads/master
  remote = origin

[color]
  branch = auto
  diff = auto
  interactive = auto
  pager = true
  status = auto
  ui = true

[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green

[color "branch"]
  current = cyan reverse
  local = cyan
  remote = green

[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red reverse

[color "status"]
  added = yellow reverse
  changed = green
  untracked = cyan

[core]
  excludesfile = ~/.gitignore
  pager = most
  whitespace=fix,-indent-with-non-tab,trailing-space,cr-at-eol

[diff]
  renamelimit = 0
  renames = copy # makes the diff much shorter when moving or copying files

[push]
  default = matching

[rerere]
  enabled = true      